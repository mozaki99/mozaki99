<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">

    <!-- https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=en-US&Locale=en-GB&Keyboard=00000809&GeoLocation=242&ProcessorArchitecture=amd64&BypassRequirementsCheck=true&BypassNetworkCheck=true&ComputerNameMode=Random&CompactOsMode=Default&TimeZoneMode=Implicit&PartitionMode=Unattended&PartitionLayout=GPT&EspSize=300&RecoveryMode=Partition&RecoverySize=1024&WindowsEditionMode=Generic&WindowsEdition=pro&UserAccountMode=Unattended&AccountName0=Ubuntu&AccountPassword0=&AccountGroup0=Administrators&AccountName1=&AccountName2=&AccountName3=&AccountName4=&AutoLogonMode=Own&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=Hidden&TaskbarSearch=Box&TaskbarIconsMode=Default&DisableWidgets=true&LeftTaskbar=true&DisableBingResults=true&StartTilesMode=Default&StartPinsMode=Default&VBoxGuestAdditions=true&WifiMode=Skip&ExpressSettings=DisableAll&KeysMode=Skip&ColorMode=Default&WallpaperMode=Default&WdacMode=Skip -->

    <!-- =================
         PASS: offlineServicing
         ================ -->
    <settings pass="offlineServicing" />

    <!-- =================
         PASS: windowsPE
         ================ -->
    <settings pass="windowsPE">
        <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
            <SetupUILanguage>
                <UILanguage>en-US</UILanguage>
            </SetupUILanguage>
            <InputLocale>0809:00000809</InputLocale>
            <SystemLocale>en-GB</SystemLocale>
            <UILanguage>en-US</UILanguage>
            <UserLocale>en-GB</UserLocale>
        </component>

        <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
            <ImageInstall>
                <OSImage>
                    <InstallTo>
                        <DiskID>0</DiskID>
                        <PartitionID>3</PartitionID>
                    </InstallTo>
                </OSImage>
            </ImageInstall>
            <UserData>
                <ProductKey>
                    <Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>
                </ProductKey>
                <AcceptEula>true</AcceptEula>
            </UserData>
            <UseConfigurationSet>false</UseConfigurationSet>

            <RunSynchronous>
                <!-- Create diskpart script: EFI, MSR partitions -->
                <RunSynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <Path>cmd.exe /c "(echo SELECT DISK=0 &amp; echo CLEAN &amp; echo CONVERT GPT &amp; echo CREATE PARTITION EFI SIZE=300 &amp; echo FORMAT QUICK FS=FAT32 LABEL=System &amp; echo CREATE PARTITION MSR SIZE=16) &gt;&gt; X:\diskpart.txt"</Path>
                </RunSynchronousCommand>

                <!-- Create Windows partition, Recovery partition -->
                <RunSynchronousCommand wcm:action="add">
                    <Order>2</Order>
                    <Path>cmd.exe /c "(echo CREATE PARTITION PRIMARY &amp; echo SHRINK MINIMUM=1024 &amp; echo FORMAT QUICK FS=NTFS LABEL=Windows &amp; echo CREATE PARTITION PRIMARY &amp; echo FORMAT QUICK FS=NTFS LABEL=Recovery) &gt;&gt; X:\diskpart.txt"</Path>
                </RunSynchronousCommand>

                <!-- Set partition ID for Recovery -->
                <RunSynchronousCommand wcm:action="add">
                    <Order>3</Order>
                    <Path>cmd.exe /c "(echo SET ID=de94bba4-06d1-4d40-a16a-bfd50179d6ac &amp; echo GPT ATTRIBUTES=0x8000000000000001) &gt;&gt; X:\diskpart.txt"</Path>
                </RunSynchronousCommand>

                <!-- Actually run diskpart -->
                <RunSynchronousCommand wcm:action="add">
                    <Order>4</Order>
                    <Path>cmd.exe /c "diskpart.exe /s X:\diskpart.txt &gt;&gt; X:\diskpart.log || ( type X:\diskpart.log &amp; echo diskpart encountered an error. &amp; pause &amp; exit /b 1 )"</Path>
                </RunSynchronousCommand>

                <!-- Bypass checks -->
                <RunSynchronousCommand wcm:action="add">
                    <Order>5</Order>
                    <Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>6</Order>
                    <Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>7</Order>
                    <Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
                </RunSynchronousCommand>
            </RunSynchronous>
        </component>
    </settings>

    <!-- =================
         PASS: generalize
         ================ -->
    <settings pass="generalize" />

    <!-- =================
         PASS: specialize
         ================ -->
    <settings pass="specialize">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
            <RunSynchronous>
                <RunSynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <Path>powershell.exe -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>2</Order>
                    <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>3</Order>
                    <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>4</Order>
                    <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>5</Order>
                    <Path>reg.exe unload "HKU\DefaultUser"</Path>
                </RunSynchronousCommand>
            </RunSynchronous>
        </component>
    </settings>

    <!-- =================
         PASS: auditSystem
         ================ -->
    <settings pass="auditSystem" />

    <!-- =================
         PASS: auditUser
         ================ -->
    <settings pass="auditUser" />

    <!-- =================
         PASS: oobeSystem
         ================ -->
    <settings pass="oobeSystem">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
            <InputLocale>0809:00000809</InputLocale>
            <SystemLocale>en-GB</SystemLocale>
            <UILanguage>en-US</UILanguage>
            <UserLocale>en-GB</UserLocale>
        </component>

        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
            <UserAccounts>
                <LocalAccounts>
                    <LocalAccount wcm:action="add">
                        <Name>User</Name>
                        <Group>Administrators</Group>
                        <Password>
                            <Value/>
                            <PlainText>true</PlainText>
                        </Password>
                    </LocalAccount>
                </LocalAccounts>
            </UserAccounts>

            <AutoLogon>
                <Username>User</Username>
                <Enabled>true</Enabled>
                <LogonCount>1</LogonCount>
                <Password>
                    <Value/>
                    <PlainText>true</PlainText>
                </Password>
            </AutoLogon>

            <OOBE>
                <ProtectYourPC>3</ProtectYourPC>
                <HideEULAPage>true</HideEULAPage>
                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                <HideOnlineAccountScreens>false</HideOnlineAccountScreens>
            </OOBE>

            <FirstLogonCommands>
                <SynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <CommandLine>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
                </SynchronousCommand>
            </FirstLogonCommands>
        </component>
    </settings>

    <!-- =================
         Custom Extensions
         ================ -->
    <Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
        <ExtractScript>
            param( [xml] $Document )
            foreach( $file in $Document.unattend.Extensions.File )
            {
                $path = [System.Environment]::ExpandEnvironmentVariables( $file.GetAttribute( 'path' ) )
                mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue'
                $content = $file.InnerText.Trim()
                if( $file.GetAttribute( 'transformation' ) -ieq 'Base64' )
                {
                    [System.IO.File]::WriteAllBytes( $path, [System.Convert]::FromBase64String( $content ) )
                }
                else
                {
                    $encoding = switch( [System.IO.Path]::GetExtension( $path ) )
                    {
                        { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8 }
                        { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ) }
                        default { [System.Text.Encoding]::Default }
                    }
                    [System.IO.File]::WriteAllBytes( $path, ( $encoding.GetPreamble() + $encoding.GetBytes( $content ) ) )
                }
            }
        </ExtractScript>

        <File path="C:\Windows\Setup\Scripts\VBoxGuestAdditions.ps1" transformation="Text">
            &amp; {
                foreach( $letter in 'DEFGHIJKLMNOPQRSTUVWXYZ'.ToCharArray() )
                {
                    $exe = "${letter}:\VBoxWindowsAdditions.exe"
                    if( Test-Path -LiteralPath $exe )
                    {
                        $certs = "${letter}:\cert"
                        Start-Process -FilePath "${certs}\VBoxCertUtil.exe" -ArgumentList "add-trusted-publisher ${certs}\vbox*.cer", "--root ${certs}\vbox*.cer" -Wait
                        Start-Process -FilePath $exe -ArgumentList '/with_wddm', '/S' -Wait
                        return
                    }
                }
                'VBoxGuestAdditions.iso is not attached to this VM.'
            } *>&1 >> 'C:\Windows\Setup\Scripts\VBoxGuestAdditions.log';
        </File>

        <File path="C:\Windows\Setup\Scripts\Specialize.ps1" transformation="Text">
            $scripts = @(
                {
                    reg.exe add "HKLM\SYSTEM\Setup\MoSetup" /v AllowUpgradesWithUnsupportedTPMOrCPU /t REG_DWORD /d 1 /f;
                },
                {
                    reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE" /v BypassNRO /t REG_DWORD /d 1 /f;
                },
                {
                    net.exe accounts /maxpwage:UNLIMITED;
                },
                {
                    reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
                },
                {
                    Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\VBoxGuestAdditions.ps1' -Raw | Invoke-Expression;
                }
            );

            &amp; {
                [float] $complete = 0;
                [float] $increment = 100 / $scripts.Count;
                foreach( $script in $scripts )
                {
                    Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
                    &amp; $script;
                    $complete += $increment;
                }
            } *>&1 >> "C:\Windows\Setup\Scripts\Specialize.log";
        </File>

        <File path="C:\Windows\Setup\Scripts\DefaultUser.ps1" transformation="Text">
            $scripts = @(
                {
                    reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f;
                },
                {
                    reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
                }
            );

            &amp; {
                [float] $complete = 0;
                [float] $increment = 100 / $scripts.Count;
                foreach( $script in $scripts )
                {
                    Write-Progress -Activity 'Running scripts to modify the default user&#39;s registry hive. Do not close this window.' -PercentComplete $complete;
                    &amp; $script;
                    $complete += $increment;
                }
            } *>&1 >> "C:\Windows\Setup\Scripts\DefaultUser.log";
        </File>

        <File path="C:\Windows\Setup\Scripts\FirstLogon.ps1" transformation="Text">
            $scripts = @(
                {
                    Set-ItemProperty -LiteralPath 'Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'AutoLogonCount' -Type 'DWord' -Force -Value 0;
                }
            );

            &amp; {
                [float] $complete = 0;
                [float] $increment = 100 / $scripts.Count;
                foreach( $script in $scripts )
                {
                    Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
                    &amp; $script;
                    $complete += $increment;
                }
            } *>&1 >> "C:\Windows\Setup\Scripts\FirstLogon.log";
        </File>
    </Extensions>
</unattend>
